// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
)

type Airport struct {
	ID      string `json:"id"`
	Name    string `json:"name"`
	Address string `json:"address"`
}

type AirportInput struct {
	Name    string `json:"name"`
	Address string `json:"address"`
}

type AirportOps struct {
	CreateAirport *Airport `json:"createAirport"`
}

type Booking struct {
	ID           string        `json:"id"`
	GoingFlight  *Flight       `json:"going_flight"`
	ReturnFlight *Flight       `json:"return_flight"`
	Customer     *Customer     `json:"customer"`
	Status       BookingStatus `json:"status"`
	Ticket       []*Ticket     `json:"ticket"`
}

type BookingCancelInput struct {
	ID string `json:"id"`
}

type BookingInput struct {
	CustomerID     string         `json:"customerId"`
	GoingFlightID  string         `json:"going_flight_id"`
	ReturnFlightID *string        `json:"return_flight_id"`
	Ticket         []*TicketInput `json:"ticket"`
	Status         BookingStatus  `json:"status"`
}

type BookingInputForGuest struct {
	Customer       *CustomerInput `json:"customer"`
	GoingFlightID  string         `json:"going_flight_id"`
	ReturnFlightID *string        `json:"return_flight_id"`
	Ticket         []*TicketInput `json:"ticket"`
	Status         BookingStatus  `json:"status"`
}

type BookingOps struct {
	CreateBookingForGuest *Booking `json:"createBookingForGuest"`
	CreateBooking         *Booking `json:"createBooking"`
	CancelBooking         bool     `json:"cancelBooking"`
}

type Customer struct {
	ID          string `json:"id"`
	Name        string `json:"name"`
	Address     string `json:"address"`
	LicenseID   string `json:"license_id"`
	PhoneNumber string `json:"phone_number"`
	Email       string `json:"email"`
}

type CustomerInput struct {
	Name        string `json:"name"`
	Address     string `json:"address"`
	LicenseID   string `json:"license_id"`
	PhoneNumber string `json:"phone_number"`
	Email       string `json:"email"`
}

type CustomerOps struct {
	CreateCustomer *Customer `json:"createCustomer"`
	UpdateCustomer bool      `json:"updateCustomer"`
}

type CustomerUpdateInput struct {
	ID          string  `json:"id"`
	Name        *string `json:"name"`
	Address     *string `json:"address"`
	LicenseID   *string `json:"license_id"`
	PhoneNumber *string `json:"phone_number"`
	Email       *string `json:"email"`
}

type Flight struct {
	ID             string   `json:"id"`
	Name           string   `json:"name"`
	Origin         *Airport `json:"origin"`
	Destination    *Airport `json:"destination"`
	TotalSlots     int      `json:"total_slots"`
	AvailableSlots int      `json:"available_slots"`
	DepartureTime  string   `json:"departure_time"`
	ArrivalTime    string   `json:"arrival_time"`
	Status         string   `json:"status"`
}

type FlightCancelInput struct {
	ID string `json:"id"`
}

type FlightInput struct {
	Name          string       `json:"name"`
	OriginID      string       `json:"originId"`
	DestinationID string       `json:"destinationId"`
	TotalSlots    int          `json:"total_slots"`
	DepartureTime string       `json:"departure_time"`
	ArrivalTime   string       `json:"arrival_time"`
	Status        FlightStatus `json:"status"`
}

type FlightOps struct {
	CreateFlight *Flight `json:"createFlight"`
	UpdateFlight bool    `json:"updateFlight"`
	CancelFlight bool    `json:"cancelFlight"`
}

type FlightSearchInput struct {
	AvailableSlotsAtLeast *int          `json:"available_slots_at_least"`
	OriginID              *string       `json:"origin_id"`
	DestinationID         *string       `json:"destination_id"`
	DepartureTimeBefore   *string       `json:"departure_time_before"`
	DepartureTimeAfter    *string       `json:"departure_time_after"`
	Status                *FlightStatus `json:"status"`
}

type FlightUpdateInput struct {
	ID            string        `json:"id"`
	Name          *string       `json:"name"`
	OriginID      *string       `json:"originId"`
	DestinationID *string       `json:"destinationId"`
	TotalSlots    *int          `json:"total_slots"`
	DepartureTime *string       `json:"departure_time"`
	ArrivalTime   *string       `json:"arrival_time"`
	Status        *FlightStatus `json:"status"`
}

type LoginInfo struct {
	TokenString string `json:"tokenString"`
}

type LoginInput struct {
	Username string `json:"username"`
	Password string `json:"password"`
}

type Pagination struct {
	AscFields []*string `json:"ascFields"`
	DesFields []*string `json:"desFields"`
	Limit     *int      `json:"limit"`
	Offset    *int      `json:"offset"`
}

type PasswordUpdateInput struct {
	ID               string `json:"id"`
	PreviousPassword string `json:"previous_password"`
	NewPassword      string `json:"new_password"`
}

type Ticket struct {
	ID                 string       `json:"id"`
	Booking            *Booking     `json:"booking"`
	PassengerLicenseID string       `json:"passenger_license_id"`
	PassengerName      string       `json:"passenger_name"`
	PassengerEmail     string       `json:"passenger_email"`
	SeatNumber         string       `json:"seat_number"`
	TicketClass        TicketClass  `json:"ticket_class"`
	Status             TicketStatus `json:"status"`
}

type TicketInput struct {
	PassengerLicenseID string       `json:"passenger_license_id"`
	PassengerName      string       `json:"passenger_name"`
	PassengerEmail     string       `json:"passenger_email"`
	SeatNumber         string       `json:"seat_number"`
	TicketClass        TicketClass  `json:"ticket_class"`
	Status             TicketStatus `json:"status"`
}

type User struct {
	ID       string    `json:"id"`
	Username string    `json:"username"`
	Email    string    `json:"email"`
	Role     string    `json:"role"`
	Customer *Customer `json:"customer"`
}

type UserInput struct {
	Username string         `json:"username"`
	Password string         `json:"password"`
	Email    string         `json:"email"`
	Role     string         `json:"role"`
	Customer *CustomerInput `json:"customer"`
}

type UserOps struct {
	Register       *User `json:"register"`
	UpdateUser     bool  `json:"updateUser"`
	UpdatePassword bool  `json:"updatePassword"`
}

type UserUpdateInput struct {
	ID    string  `json:"id"`
	Email *string `json:"email"`
	Role  *string `json:"role"`
}

type BookingStatus string

const (
	BookingStatusCancelled BookingStatus = "Cancelled"
	BookingStatusScheduled BookingStatus = "Scheduled"
	BookingStatusDeparted  BookingStatus = "Departed"
)

var AllBookingStatus = []BookingStatus{
	BookingStatusCancelled,
	BookingStatusScheduled,
	BookingStatusDeparted,
}

func (e BookingStatus) IsValid() bool {
	switch e {
	case BookingStatusCancelled, BookingStatusScheduled, BookingStatusDeparted:
		return true
	}
	return false
}

func (e BookingStatus) String() string {
	return string(e)
}

func (e *BookingStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = BookingStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid BookingStatus", str)
	}
	return nil
}

func (e BookingStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type FlightStatus string

const (
	FlightStatusCancelled FlightStatus = "Cancelled"
	FlightStatusDeparted  FlightStatus = "Departed"
	FlightStatusLanded    FlightStatus = "Landed"
	FlightStatusScheduled FlightStatus = "Scheduled"
	FlightStatusDelayed   FlightStatus = "Delayed"
)

var AllFlightStatus = []FlightStatus{
	FlightStatusCancelled,
	FlightStatusDeparted,
	FlightStatusLanded,
	FlightStatusScheduled,
	FlightStatusDelayed,
}

func (e FlightStatus) IsValid() bool {
	switch e {
	case FlightStatusCancelled, FlightStatusDeparted, FlightStatusLanded, FlightStatusScheduled, FlightStatusDelayed:
		return true
	}
	return false
}

func (e FlightStatus) String() string {
	return string(e)
}

func (e *FlightStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = FlightStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid FlightStatus", str)
	}
	return nil
}

func (e FlightStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type Role string

const (
	RoleAdmin Role = "admin"
	RoleUser  Role = "user"
)

var AllRole = []Role{
	RoleAdmin,
	RoleUser,
}

func (e Role) IsValid() bool {
	switch e {
	case RoleAdmin, RoleUser:
		return true
	}
	return false
}

func (e Role) String() string {
	return string(e)
}

func (e *Role) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Role(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Role", str)
	}
	return nil
}

func (e Role) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type TicketClass string

const (
	TicketClassFirstClass    TicketClass = "FirstClass"
	TicketClassBusinessClass TicketClass = "BusinessClass"
	TicketClassEconomyClass  TicketClass = "EconomyClass"
)

var AllTicketClass = []TicketClass{
	TicketClassFirstClass,
	TicketClassBusinessClass,
	TicketClassEconomyClass,
}

func (e TicketClass) IsValid() bool {
	switch e {
	case TicketClassFirstClass, TicketClassBusinessClass, TicketClassEconomyClass:
		return true
	}
	return false
}

func (e TicketClass) String() string {
	return string(e)
}

func (e *TicketClass) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = TicketClass(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid TicketClass", str)
	}
	return nil
}

func (e TicketClass) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type TicketStatus string

const (
	TicketStatusCancelled TicketStatus = "Cancelled"
	TicketStatusDeparted  TicketStatus = "Departed"
	TicketStatusScheduled TicketStatus = "Scheduled"
)

var AllTicketStatus = []TicketStatus{
	TicketStatusCancelled,
	TicketStatusDeparted,
	TicketStatusScheduled,
}

func (e TicketStatus) IsValid() bool {
	switch e {
	case TicketStatusCancelled, TicketStatusDeparted, TicketStatusScheduled:
		return true
	}
	return false
}

func (e TicketStatus) String() string {
	return string(e)
}

func (e *TicketStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = TicketStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid TicketStatus", str)
	}
	return nil
}

func (e TicketStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
