// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: proto/flight.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FlightServiceClient is the client API for FlightService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FlightServiceClient interface {
	PostAirport(ctx context.Context, in *Airport, opts ...grpc.CallOption) (*Airport, error)
	GetAirport(ctx context.Context, in *UUID, opts ...grpc.CallOption) (*Airport, error)
	GetAirports(ctx context.Context, in *Pagination, opts ...grpc.CallOption) (*Airports, error)
	PostFlight(ctx context.Context, in *FlightInput, opts ...grpc.CallOption) (*Flight, error)
	GetFlight(ctx context.Context, in *UUID, opts ...grpc.CallOption) (*Flight, error)
	GetFlights(ctx context.Context, in *Pagination, opts ...grpc.CallOption) (*Flights, error)
	UpdateFlight(ctx context.Context, in *FlightUpdateInput, opts ...grpc.CallOption) (*emptypb.Empty, error)
	SetAvailableSlots(ctx context.Context, in *AvailableSlotsInput, opts ...grpc.CallOption) (*emptypb.Empty, error)
	SearchFlight(ctx context.Context, in *FlightSearchInput, opts ...grpc.CallOption) (*Flights, error)
	CancelFlight(ctx context.Context, in *UUID, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type flightServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFlightServiceClient(cc grpc.ClientConnInterface) FlightServiceClient {
	return &flightServiceClient{cc}
}

func (c *flightServiceClient) PostAirport(ctx context.Context, in *Airport, opts ...grpc.CallOption) (*Airport, error) {
	out := new(Airport)
	err := c.cc.Invoke(ctx, "/pb.FlightService/PostAirport", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flightServiceClient) GetAirport(ctx context.Context, in *UUID, opts ...grpc.CallOption) (*Airport, error) {
	out := new(Airport)
	err := c.cc.Invoke(ctx, "/pb.FlightService/GetAirport", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flightServiceClient) GetAirports(ctx context.Context, in *Pagination, opts ...grpc.CallOption) (*Airports, error) {
	out := new(Airports)
	err := c.cc.Invoke(ctx, "/pb.FlightService/GetAirports", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flightServiceClient) PostFlight(ctx context.Context, in *FlightInput, opts ...grpc.CallOption) (*Flight, error) {
	out := new(Flight)
	err := c.cc.Invoke(ctx, "/pb.FlightService/PostFlight", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flightServiceClient) GetFlight(ctx context.Context, in *UUID, opts ...grpc.CallOption) (*Flight, error) {
	out := new(Flight)
	err := c.cc.Invoke(ctx, "/pb.FlightService/GetFlight", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flightServiceClient) GetFlights(ctx context.Context, in *Pagination, opts ...grpc.CallOption) (*Flights, error) {
	out := new(Flights)
	err := c.cc.Invoke(ctx, "/pb.FlightService/GetFlights", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flightServiceClient) UpdateFlight(ctx context.Context, in *FlightUpdateInput, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/pb.FlightService/UpdateFlight", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flightServiceClient) SetAvailableSlots(ctx context.Context, in *AvailableSlotsInput, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/pb.FlightService/SetAvailableSlots", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flightServiceClient) SearchFlight(ctx context.Context, in *FlightSearchInput, opts ...grpc.CallOption) (*Flights, error) {
	out := new(Flights)
	err := c.cc.Invoke(ctx, "/pb.FlightService/SearchFlight", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flightServiceClient) CancelFlight(ctx context.Context, in *UUID, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/pb.FlightService/CancelFlight", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FlightServiceServer is the server API for FlightService service.
// All implementations must embed UnimplementedFlightServiceServer
// for forward compatibility
type FlightServiceServer interface {
	PostAirport(context.Context, *Airport) (*Airport, error)
	GetAirport(context.Context, *UUID) (*Airport, error)
	GetAirports(context.Context, *Pagination) (*Airports, error)
	PostFlight(context.Context, *FlightInput) (*Flight, error)
	GetFlight(context.Context, *UUID) (*Flight, error)
	GetFlights(context.Context, *Pagination) (*Flights, error)
	UpdateFlight(context.Context, *FlightUpdateInput) (*emptypb.Empty, error)
	SetAvailableSlots(context.Context, *AvailableSlotsInput) (*emptypb.Empty, error)
	SearchFlight(context.Context, *FlightSearchInput) (*Flights, error)
	CancelFlight(context.Context, *UUID) (*emptypb.Empty, error)
	mustEmbedUnimplementedFlightServiceServer()
}

// UnimplementedFlightServiceServer must be embedded to have forward compatible implementations.
type UnimplementedFlightServiceServer struct {
}

func (UnimplementedFlightServiceServer) PostAirport(context.Context, *Airport) (*Airport, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostAirport not implemented")
}
func (UnimplementedFlightServiceServer) GetAirport(context.Context, *UUID) (*Airport, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAirport not implemented")
}
func (UnimplementedFlightServiceServer) GetAirports(context.Context, *Pagination) (*Airports, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAirports not implemented")
}
func (UnimplementedFlightServiceServer) PostFlight(context.Context, *FlightInput) (*Flight, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostFlight not implemented")
}
func (UnimplementedFlightServiceServer) GetFlight(context.Context, *UUID) (*Flight, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFlight not implemented")
}
func (UnimplementedFlightServiceServer) GetFlights(context.Context, *Pagination) (*Flights, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFlights not implemented")
}
func (UnimplementedFlightServiceServer) UpdateFlight(context.Context, *FlightUpdateInput) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateFlight not implemented")
}
func (UnimplementedFlightServiceServer) SetAvailableSlots(context.Context, *AvailableSlotsInput) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetAvailableSlots not implemented")
}
func (UnimplementedFlightServiceServer) SearchFlight(context.Context, *FlightSearchInput) (*Flights, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchFlight not implemented")
}
func (UnimplementedFlightServiceServer) CancelFlight(context.Context, *UUID) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelFlight not implemented")
}
func (UnimplementedFlightServiceServer) mustEmbedUnimplementedFlightServiceServer() {}

// UnsafeFlightServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FlightServiceServer will
// result in compilation errors.
type UnsafeFlightServiceServer interface {
	mustEmbedUnimplementedFlightServiceServer()
}

func RegisterFlightServiceServer(s grpc.ServiceRegistrar, srv FlightServiceServer) {
	s.RegisterService(&FlightService_ServiceDesc, srv)
}

func _FlightService_PostAirport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Airport)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlightServiceServer).PostAirport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.FlightService/PostAirport",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlightServiceServer).PostAirport(ctx, req.(*Airport))
	}
	return interceptor(ctx, in, info, handler)
}

func _FlightService_GetAirport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UUID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlightServiceServer).GetAirport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.FlightService/GetAirport",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlightServiceServer).GetAirport(ctx, req.(*UUID))
	}
	return interceptor(ctx, in, info, handler)
}

func _FlightService_GetAirports_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Pagination)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlightServiceServer).GetAirports(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.FlightService/GetAirports",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlightServiceServer).GetAirports(ctx, req.(*Pagination))
	}
	return interceptor(ctx, in, info, handler)
}

func _FlightService_PostFlight_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FlightInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlightServiceServer).PostFlight(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.FlightService/PostFlight",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlightServiceServer).PostFlight(ctx, req.(*FlightInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _FlightService_GetFlight_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UUID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlightServiceServer).GetFlight(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.FlightService/GetFlight",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlightServiceServer).GetFlight(ctx, req.(*UUID))
	}
	return interceptor(ctx, in, info, handler)
}

func _FlightService_GetFlights_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Pagination)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlightServiceServer).GetFlights(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.FlightService/GetFlights",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlightServiceServer).GetFlights(ctx, req.(*Pagination))
	}
	return interceptor(ctx, in, info, handler)
}

func _FlightService_UpdateFlight_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FlightUpdateInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlightServiceServer).UpdateFlight(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.FlightService/UpdateFlight",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlightServiceServer).UpdateFlight(ctx, req.(*FlightUpdateInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _FlightService_SetAvailableSlots_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AvailableSlotsInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlightServiceServer).SetAvailableSlots(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.FlightService/SetAvailableSlots",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlightServiceServer).SetAvailableSlots(ctx, req.(*AvailableSlotsInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _FlightService_SearchFlight_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FlightSearchInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlightServiceServer).SearchFlight(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.FlightService/SearchFlight",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlightServiceServer).SearchFlight(ctx, req.(*FlightSearchInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _FlightService_CancelFlight_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UUID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlightServiceServer).CancelFlight(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.FlightService/CancelFlight",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlightServiceServer).CancelFlight(ctx, req.(*UUID))
	}
	return interceptor(ctx, in, info, handler)
}

// FlightService_ServiceDesc is the grpc.ServiceDesc for FlightService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FlightService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.FlightService",
	HandlerType: (*FlightServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PostAirport",
			Handler:    _FlightService_PostAirport_Handler,
		},
		{
			MethodName: "GetAirport",
			Handler:    _FlightService_GetAirport_Handler,
		},
		{
			MethodName: "GetAirports",
			Handler:    _FlightService_GetAirports_Handler,
		},
		{
			MethodName: "PostFlight",
			Handler:    _FlightService_PostFlight_Handler,
		},
		{
			MethodName: "GetFlight",
			Handler:    _FlightService_GetFlight_Handler,
		},
		{
			MethodName: "GetFlights",
			Handler:    _FlightService_GetFlights_Handler,
		},
		{
			MethodName: "UpdateFlight",
			Handler:    _FlightService_UpdateFlight_Handler,
		},
		{
			MethodName: "SetAvailableSlots",
			Handler:    _FlightService_SetAvailableSlots_Handler,
		},
		{
			MethodName: "SearchFlight",
			Handler:    _FlightService_SearchFlight_Handler,
		},
		{
			MethodName: "CancelFlight",
			Handler:    _FlightService_CancelFlight_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/flight.proto",
}
