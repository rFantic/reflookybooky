services:

  adminer:
    image: adminer
    restart: always
    ports:
      - 9999:8080

  userdb:
    profiles: ["user", "graphql"]
    image: postgres
    restart: always
    environment:
      POSTGRES_DB: user
      POSTGRES_USER: root
      POSTGRES_PASSWORD: passwd

  user:
    profiles: ["user", "graphql"]
    depends_on:
      - userdb
    build:
      context: .
      dockerfile: ./services/user/user.dockerfile
    restart: on-failure
    ports:
      - 4001:4000

  flightdb:
    profiles: ["flight", "graphql"]
    image: postgres
    restart: always
    environment:
      POSTGRES_DB: flight
      POSTGRES_USER: root
      POSTGRES_PASSWORD: passwd

  flight:
    profiles: ["flight", "graphql"]
    depends_on:
      - flightdb
    build:
      context: .
      dockerfile: ./services/flight/flight.dockerfile
    restart: on-failure
    ports:
      - 4003:4000

  customerdb:
    profiles: ["customer", "graphql"]
    image: postgres
    restart: always
    environment:
      POSTGRES_DB: customer
      POSTGRES_USER: root
      POSTGRES_PASSWORD: passwd

  customer:
    profiles: ["customer", "graphql"]
    depends_on:
      - customerdb
    build:
      context: .
      dockerfile: ./services/customer/customer.dockerfile
    restart: on-failure
    ports:
      - 4002:4000

  bookingdb:
    profiles: ["booking", "graphql"]
    image: postgres
    restart: always
    environment:
      POSTGRES_DB: booking
      POSTGRES_USER: root
      POSTGRES_PASSWORD: passwd

  booking:
    profiles: ["booking", "graphql"]
    depends_on:
      - bookingdb
    build:
      context: .
      dockerfile: ./services/booking/booking.dockerfile
    restart: on-failure
    ports:
      - 4004:4000

  graphql:
    profiles: ["graphql"]
    build:
      context: .
      dockerfile: ./services/graphql/graphql.dockerfile
    restart: on-failure
    ports:
      - 8081:8081
      - 4000:4000
