// Code generated by ent, DO NOT EDIT.

package ent

import (
	"flookybooky/ent/airport"
	"flookybooky/ent/booking"
	"flookybooky/ent/customer"
	"flookybooky/ent/flight"
	"flookybooky/ent/schema"
	"flookybooky/ent/ticket"
	"flookybooky/ent/user"
	"time"

	"github.com/google/uuid"
)

// The init function reads all schema descriptors with runtime code
// (default values, validators, hooks and policies) and stitches it
// to their package variables.
func init() {
	airportFields := schema.Airport{}.Fields()
	_ = airportFields
	// airportDescID is the schema descriptor for id field.
	airportDescID := airportFields[0].Descriptor()
	// airport.DefaultID holds the default value on creation for the id field.
	airport.DefaultID = airportDescID.Default.(func() uuid.UUID)
	bookingFields := schema.Booking{}.Fields()
	_ = bookingFields
	// bookingDescCreatedAt is the schema descriptor for created_at field.
	bookingDescCreatedAt := bookingFields[5].Descriptor()
	// booking.DefaultCreatedAt holds the default value on creation for the created_at field.
	booking.DefaultCreatedAt = bookingDescCreatedAt.Default.(func() time.Time)
	// bookingDescID is the schema descriptor for id field.
	bookingDescID := bookingFields[0].Descriptor()
	// booking.DefaultID holds the default value on creation for the id field.
	booking.DefaultID = bookingDescID.Default.(func() uuid.UUID)
	customerFields := schema.Customer{}.Fields()
	_ = customerFields
	// customerDescLicenseID is the schema descriptor for license_id field.
	customerDescLicenseID := customerFields[3].Descriptor()
	// customer.LicenseIDValidator is a validator for the "license_id" field. It is called by the builders before save.
	customer.LicenseIDValidator = func() func(string) error {
		validators := customerDescLicenseID.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(license_id string) error {
			for _, fn := range fns {
				if err := fn(license_id); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// customerDescPhoneNumber is the schema descriptor for phone_number field.
	customerDescPhoneNumber := customerFields[4].Descriptor()
	// customer.PhoneNumberValidator is a validator for the "phone_number" field. It is called by the builders before save.
	customer.PhoneNumberValidator = customerDescPhoneNumber.Validators[0].(func(string) error)
	// customerDescTimestamp is the schema descriptor for timestamp field.
	customerDescTimestamp := customerFields[6].Descriptor()
	// customer.DefaultTimestamp holds the default value on creation for the timestamp field.
	customer.DefaultTimestamp = customerDescTimestamp.Default.(time.Time)
	// customerDescID is the schema descriptor for id field.
	customerDescID := customerFields[0].Descriptor()
	// customer.DefaultID holds the default value on creation for the id field.
	customer.DefaultID = customerDescID.Default.(func() uuid.UUID)
	flightFields := schema.Flight{}.Fields()
	_ = flightFields
	// flightDescCreatedAt is the schema descriptor for created_at field.
	flightDescCreatedAt := flightFields[9].Descriptor()
	// flight.DefaultCreatedAt holds the default value on creation for the created_at field.
	flight.DefaultCreatedAt = flightDescCreatedAt.Default.(func() time.Time)
	// flightDescID is the schema descriptor for id field.
	flightDescID := flightFields[0].Descriptor()
	// flight.DefaultID holds the default value on creation for the id field.
	flight.DefaultID = flightDescID.Default.(func() uuid.UUID)
	ticketFields := schema.Ticket{}.Fields()
	_ = ticketFields
	// ticketDescID is the schema descriptor for id field.
	ticketDescID := ticketFields[0].Descriptor()
	// ticket.DefaultID holds the default value on creation for the id field.
	ticket.DefaultID = ticketDescID.Default.(func() uuid.UUID)
	userFields := schema.User{}.Fields()
	_ = userFields
	// userDescCustomerID is the schema descriptor for customer_id field.
	userDescCustomerID := userFields[1].Descriptor()
	// user.CustomerIDValidator is a validator for the "customer_id" field. It is called by the builders before save.
	user.CustomerIDValidator = userDescCustomerID.Validators[0].(func(string) error)
	// userDescUsername is the schema descriptor for username field.
	userDescUsername := userFields[2].Descriptor()
	// user.UsernameValidator is a validator for the "username" field. It is called by the builders before save.
	user.UsernameValidator = userDescUsername.Validators[0].(func(string) error)
	// userDescPassword is the schema descriptor for password field.
	userDescPassword := userFields[3].Descriptor()
	// user.PasswordValidator is a validator for the "password" field. It is called by the builders before save.
	user.PasswordValidator = userDescPassword.Validators[0].(func(string) error)
	// userDescEmail is the schema descriptor for email field.
	userDescEmail := userFields[4].Descriptor()
	// user.EmailValidator is a validator for the "email" field. It is called by the builders before save.
	user.EmailValidator = func() func(string) error {
		validators := userDescEmail.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(email string) error {
			for _, fn := range fns {
				if err := fn(email); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// userDescID is the schema descriptor for id field.
	userDescID := userFields[0].Descriptor()
	// user.DefaultID holds the default value on creation for the id field.
	user.DefaultID = userDescID.Default.(func() uuid.UUID)
}
