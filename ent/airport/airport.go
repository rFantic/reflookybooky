// Code generated by ent, DO NOT EDIT.

package airport

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the airport type in the database.
	Label = "airport"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldAddress holds the string denoting the address field in the database.
	FieldAddress = "address"
	// EdgeOrigin holds the string denoting the origin edge name in mutations.
	EdgeOrigin = "origin"
	// EdgeDestination holds the string denoting the destination edge name in mutations.
	EdgeDestination = "destination"
	// Table holds the table name of the airport in the database.
	Table = "airports"
	// OriginTable is the table that holds the origin relation/edge.
	OriginTable = "flights"
	// OriginInverseTable is the table name for the Flight entity.
	// It exists in this package in order to avoid circular dependency with the "flight" package.
	OriginInverseTable = "flights"
	// OriginColumn is the table column denoting the origin relation/edge.
	OriginColumn = "origin_id"
	// DestinationTable is the table that holds the destination relation/edge.
	DestinationTable = "flights"
	// DestinationInverseTable is the table name for the Flight entity.
	// It exists in this package in order to avoid circular dependency with the "flight" package.
	DestinationInverseTable = "flights"
	// DestinationColumn is the table column denoting the destination relation/edge.
	DestinationColumn = "destinartion_id"
)

// Columns holds all SQL columns for airport fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldAddress,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// OrderOption defines the ordering options for the Airport queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByAddress orders the results by the address field.
func ByAddress(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAddress, opts...).ToFunc()
}

// ByOriginCount orders the results by origin count.
func ByOriginCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newOriginStep(), opts...)
	}
}

// ByOrigin orders the results by origin terms.
func ByOrigin(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newOriginStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByDestinationCount orders the results by destination count.
func ByDestinationCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newDestinationStep(), opts...)
	}
}

// ByDestination orders the results by destination terms.
func ByDestination(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newDestinationStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newOriginStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(OriginInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, OriginTable, OriginColumn),
	)
}
func newDestinationStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(DestinationInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, DestinationTable, DestinationColumn),
	)
}
