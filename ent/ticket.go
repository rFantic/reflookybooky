// Code generated by ent, DO NOT EDIT.

package ent

import (
	"flookybooky/ent/booking"
	"flookybooky/ent/ticket"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// Ticket is the model entity for the Ticket schema.
type Ticket struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// BookingID holds the value of the "booking_id" field.
	BookingID uuid.UUID `json:"booking_id,omitempty"`
	// Status holds the value of the "status" field.
	Status ticket.Status `json:"status,omitempty"`
	// PassengerName holds the value of the "passenger_name" field.
	PassengerName string `json:"passenger_name,omitempty"`
	// PassengerLicenseID holds the value of the "passenger_license_id" field.
	PassengerLicenseID string `json:"passenger_license_id,omitempty"`
	// PassengerEmail holds the value of the "passenger_email" field.
	PassengerEmail string `json:"passenger_email,omitempty"`
	// SeatNumber holds the value of the "seat_number" field.
	SeatNumber string `json:"seat_number,omitempty"`
	// Class holds the value of the "class" field.
	Class ticket.Class `json:"class,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the TicketQuery when eager-loading is set.
	Edges        TicketEdges `json:"edges"`
	selectValues sql.SelectValues
}

// TicketEdges holds the relations/edges for other nodes in the graph.
type TicketEdges struct {
	// Booking holds the value of the booking edge.
	Booking *Booking `json:"booking,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// BookingOrErr returns the Booking value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TicketEdges) BookingOrErr() (*Booking, error) {
	if e.loadedTypes[0] {
		if e.Booking == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: booking.Label}
		}
		return e.Booking, nil
	}
	return nil, &NotLoadedError{edge: "booking"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Ticket) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case ticket.FieldStatus, ticket.FieldPassengerName, ticket.FieldPassengerLicenseID, ticket.FieldPassengerEmail, ticket.FieldSeatNumber, ticket.FieldClass:
			values[i] = new(sql.NullString)
		case ticket.FieldCreatedAt, ticket.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case ticket.FieldID, ticket.FieldBookingID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Ticket fields.
func (t *Ticket) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case ticket.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				t.ID = *value
			}
		case ticket.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				t.CreatedAt = value.Time
			}
		case ticket.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				t.UpdatedAt = value.Time
			}
		case ticket.FieldBookingID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field booking_id", values[i])
			} else if value != nil {
				t.BookingID = *value
			}
		case ticket.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				t.Status = ticket.Status(value.String)
			}
		case ticket.FieldPassengerName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field passenger_name", values[i])
			} else if value.Valid {
				t.PassengerName = value.String
			}
		case ticket.FieldPassengerLicenseID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field passenger_license_id", values[i])
			} else if value.Valid {
				t.PassengerLicenseID = value.String
			}
		case ticket.FieldPassengerEmail:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field passenger_email", values[i])
			} else if value.Valid {
				t.PassengerEmail = value.String
			}
		case ticket.FieldSeatNumber:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field seat_number", values[i])
			} else if value.Valid {
				t.SeatNumber = value.String
			}
		case ticket.FieldClass:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field class", values[i])
			} else if value.Valid {
				t.Class = ticket.Class(value.String)
			}
		default:
			t.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Ticket.
// This includes values selected through modifiers, order, etc.
func (t *Ticket) Value(name string) (ent.Value, error) {
	return t.selectValues.Get(name)
}

// QueryBooking queries the "booking" edge of the Ticket entity.
func (t *Ticket) QueryBooking() *BookingQuery {
	return NewTicketClient(t.config).QueryBooking(t)
}

// Update returns a builder for updating this Ticket.
// Note that you need to call Ticket.Unwrap() before calling this method if this Ticket
// was returned from a transaction, and the transaction was committed or rolled back.
func (t *Ticket) Update() *TicketUpdateOne {
	return NewTicketClient(t.config).UpdateOne(t)
}

// Unwrap unwraps the Ticket entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (t *Ticket) Unwrap() *Ticket {
	_tx, ok := t.config.driver.(*txDriver)
	if !ok {
		panic("ent: Ticket is not a transactional entity")
	}
	t.config.driver = _tx.drv
	return t
}

// String implements the fmt.Stringer.
func (t *Ticket) String() string {
	var builder strings.Builder
	builder.WriteString("Ticket(")
	builder.WriteString(fmt.Sprintf("id=%v, ", t.ID))
	builder.WriteString("created_at=")
	builder.WriteString(t.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(t.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("booking_id=")
	builder.WriteString(fmt.Sprintf("%v", t.BookingID))
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", t.Status))
	builder.WriteString(", ")
	builder.WriteString("passenger_name=")
	builder.WriteString(t.PassengerName)
	builder.WriteString(", ")
	builder.WriteString("passenger_license_id=")
	builder.WriteString(t.PassengerLicenseID)
	builder.WriteString(", ")
	builder.WriteString("passenger_email=")
	builder.WriteString(t.PassengerEmail)
	builder.WriteString(", ")
	builder.WriteString("seat_number=")
	builder.WriteString(t.SeatNumber)
	builder.WriteString(", ")
	builder.WriteString("class=")
	builder.WriteString(fmt.Sprintf("%v", t.Class))
	builder.WriteByte(')')
	return builder.String()
}

// Tickets is a parsable slice of Ticket.
type Tickets []*Ticket
