package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.31

import (
	"context"
	"flookybooky/gql_generated"
	internal "flookybooky/internal/parser"
	"flookybooky/internal/util"
	"flookybooky/model"
	"flookybooky/pb"

	"github.com/gin-gonic/gin"
)

// User is the resolver for the user field.
func (r *mutationResolver) User(ctx context.Context) (*model.UserOps, error) {
	return &model.UserOps{}, nil
}

// Users is the resolver for the users field.
func (r *queryResolver) Users(ctx context.Context, input *model.Pagination) ([]*model.User, error) {
	usersRes, err := r.client.UserClient.GetUsers(ctx,
		internal.ParsePaginationGraphqlToPb(input))
	return internal.ParseUsersPbToGraphql(usersRes), err
}

// Login is the resolver for the login field.
func (r *queryResolver) Login(ctx context.Context, input model.LoginInput) (*model.LoginInfo, error) {
	res, err := r.client.UserClient.Login(ctx,
		&pb.LoginRequest{
			User: &pb.User{
				Username: input.Username,
				Password: input.Password,
			},
		},
	)

	if err != nil {
		return nil, err
	}

	c, _ := ctx.Value(util.ContextKey{}).(*gin.Context)
	c.SetCookie(
		"Authentication", res.JwtToken,
		int(res.ExpireTime), "", "", false, false,
	)
	return &model.LoginInfo{
		TokenString: res.JwtToken,
	}, nil
}

// Logout is the resolver for the logout field.
func (r *queryResolver) Logout(ctx context.Context) (bool, error) {
	c, _ := ctx.Value(util.ContextKey{}).(*gin.Context)
	c.SetCookie(
		"Authentication", "",
		-1, "", "", false, false,
	)
	return true, nil
}

// Customer is the resolver for the customer field.
func (r *userResolver) Customer(ctx context.Context, obj *model.User) (*model.Customer, error) {
	var out *model.Customer
	if obj.Customer != nil {
		customerRes, err := r.client.CustomerClient.GetCustomer(ctx, &pb.UUID{Id: obj.Customer.ID})
		if err != nil {
			return nil, err
		}
		out = internal.ParseCustomerPbToGraphql(customerRes)
	}
	return out, nil
}

// Register is the resolver for the register field.
func (r *userOpsResolver) Register(ctx context.Context, obj *model.UserOps, input model.UserInput) (*model.User, error) {
	userReq := internal.ParseUserInputGraphqlToPb(&input)
	if input.Customer != nil {
		customerReq := internal.ParseCustomerInputGraphqlToPb(input.Customer)
		customerRes, err := r.client.CustomerClient.PostCustomer(ctx, customerReq)
		if err != nil {
			return nil, err
		}
		userReq.CustomerId = &customerRes.Id
	}
	userRes, err := r.client.UserClient.PostUser(ctx, userReq)
	if err != nil {
		return nil, err
	}
	return internal.ParseUserPbToGraphql(userRes), nil
}

// UpdateUser is the resolver for the updateUser field.
func (r *userOpsResolver) UpdateUser(ctx context.Context, obj *model.UserOps, input model.UserUpdateInput) (bool, error) {
	_, err := r.client.UserClient.UpdateUser(ctx, internal.ParseUserUpdateInputGraphqlToPb(&input))
	if err != nil {
		return false, err
	}
	return true, nil
}

// UpdatePassword is the resolver for the updatePassword field.
func (r *userOpsResolver) UpdatePassword(ctx context.Context, obj *model.UserOps, input model.PasswordUpdateInput) (bool, error) {
	_, err := r.client.UserClient.UpdatePassword(ctx, internal.ParsePasswordInputGraphqlToPb(&input))
	if err != nil {
		return false, err
	}
	return true, nil
}

// User returns gql_generated.UserResolver implementation.
func (r *Resolver) User() gql_generated.UserResolver { return &userResolver{r} }

// UserOps returns gql_generated.UserOpsResolver implementation.
func (r *Resolver) UserOps() gql_generated.UserOpsResolver { return &userOpsResolver{r} }

type userResolver struct{ *Resolver }
type userOpsResolver struct{ *Resolver }
