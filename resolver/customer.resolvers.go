package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.31

import (
	"context"
	"flookybooky/gql_generated"
	internal "flookybooky/internal/parser"
	"flookybooky/model"
)

// CreateCustomer is the resolver for the createCustomer field.
func (r *customerOpsResolver) CreateCustomer(ctx context.Context, obj *model.CustomerOps, input model.CustomerInput) (*model.Customer, error) {
	customerRes, err := r.client.CustomerClient.PostCustomer(ctx,
		internal.ParseCustomerInputGraphqlToPb(&input),
	)
	if err != nil {
		return nil, err
	}
	return internal.ParseCustomerPbToGraphql(customerRes), nil
}

// UpdateCustomer is the resolver for the updateCustomer field.
func (r *customerOpsResolver) UpdateCustomer(ctx context.Context, obj *model.CustomerOps, input model.CustomerUpdateInput) (bool, error) {
	_, err := r.client.CustomerClient.UpdateCustomer(ctx,
		internal.ParseCustomerUpdateInputGraphqlToPb(&input))
	if err != nil {
		return false, err
	}
	return true, nil
}

// Customer is the resolver for the customer field.
func (r *mutationResolver) Customer(ctx context.Context) (*model.CustomerOps, error) {
	return &model.CustomerOps{}, nil
}

// Customers is the resolver for the customers field.
func (r *queryResolver) Customers(ctx context.Context, input *model.Pagination) ([]*model.Customer, error) {
	customersRes, err := r.client.CustomerClient.GetCustomers(ctx,
		internal.ParsePaginationGraphqlToPb(input))
	return internal.ParseCustomersPbToGraphql(customersRes), err
}

// CustomerOps returns gql_generated.CustomerOpsResolver implementation.
func (r *Resolver) CustomerOps() gql_generated.CustomerOpsResolver { return &customerOpsResolver{r} }

type customerOpsResolver struct{ *Resolver }
