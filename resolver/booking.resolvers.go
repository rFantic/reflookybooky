package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.31

import (
	"context"
	"flookybooky/gql_generated"
	internal "flookybooky/internal/parser"
	"flookybooky/model"
	"flookybooky/pb"
	"fmt"
	"time"
)

// GoingFlight is the resolver for the going_flight field.
func (r *bookingResolver) GoingFlight(ctx context.Context, obj *model.Booking) (*model.Flight, error) {
	if obj.GoingFlight != nil {
		flightRes, err := r.client.FlightClient.GetFlight(ctx,
			&pb.UUID{Id: obj.GoingFlight.ID})
		return internal.ParseFlightPbToGraphql(flightRes), err
	}
	return nil, nil
}

// ReturnFlight is the resolver for the return_flight field.
func (r *bookingResolver) ReturnFlight(ctx context.Context, obj *model.Booking) (*model.Flight, error) {
	if obj.ReturnFlight != nil {
		flightRes, err := r.client.FlightClient.GetFlight(ctx,
			&pb.UUID{Id: obj.ReturnFlight.ID})
		return internal.ParseFlightPbToGraphql(flightRes), err
	}
	return nil, nil
}

// Customer is the resolver for the customer field.
func (r *bookingResolver) Customer(ctx context.Context, obj *model.Booking) (*model.Customer, error) {
	var out *model.Customer
	if obj.Customer != nil {
		customerRes, err := r.client.CustomerClient.GetCustomer(ctx, &pb.UUID{Id: obj.Customer.ID})
		if err != nil {
			return nil, err
		}
		out = internal.ParseCustomerPbToGraphql(customerRes)
	}
	return out, nil
}

// Ticket is the resolver for the ticket field.
func (r *bookingResolver) Ticket(ctx context.Context, obj *model.Booking) ([]*model.Ticket, error) {
	return obj.Ticket, nil
}

// CreateBookingForGuest is the resolver for the createBookingForGuest field.
func (r *bookingOpsResolver) CreateBookingForGuest(ctx context.Context, obj *model.BookingOps, input model.BookingInputForGuest) (*model.Booking, error) {
	_flightRes, err := r.client.FlightClient.GetFlight(ctx, &pb.UUID{Id: input.GoingFlightID})
	ticketNums := len(input.Ticket)
	if err != nil {
		return nil, err
	}
	if time.Until(_flightRes.DepartureTime.AsTime()).Hours() < 24 {
		return nil, fmt.Errorf("booking for flight closed")
	}
	if int(_flightRes.AvailableSlots) < ticketNums {
		return nil, fmt.Errorf("not enough available slots")
	}
	_, err = r.client.FlightClient.SetAvailableSlots(ctx, &pb.AvailableSlotsInput{
		Id:             input.GoingFlightID,
		AvailableSlots: _flightRes.AvailableSlots - int64(ticketNums),
	})
	if err != nil {
		return nil, err
	}
	if input.ReturnFlightID != nil {
		_, err = r.client.FlightClient.GetFlight(ctx, &pb.UUID{Id: *input.ReturnFlightID})
		if err != nil {
			return nil, err
		}
	}
	bookingRes, err := r.client.BookingClient.PostBookingForGuest(ctx,
		internal.ParseBookingInputForGuestGraphqlToPb(&input))
	return internal.ParseBookingPbToGraphql(bookingRes), err
}

// CreateBooking is the resolver for the createBooking field.
func (r *bookingOpsResolver) CreateBooking(ctx context.Context, obj *model.BookingOps, input model.BookingInput) (*model.Booking, error) {
	ticketNums := len(input.Ticket)
	goingFlight, err := r.client.FlightClient.GetFlight(ctx, &pb.UUID{Id: input.GoingFlightID})
	if err != nil {
		return nil, err
	}
	if time.Until(goingFlight.DepartureTime.AsTime()).Hours() < 24 {
		return nil, fmt.Errorf("booking for flight closed")
	}
	if int(goingFlight.AvailableSlots) < ticketNums {
		return nil, fmt.Errorf("not enough available slots")
	}
	_, err = r.client.FlightClient.SetAvailableSlots(ctx, &pb.AvailableSlotsInput{
		Id:             input.GoingFlightID,
		AvailableSlots: goingFlight.AvailableSlots - int64(ticketNums),
	})
	if err != nil {
		return nil, err
	}
	if input.ReturnFlightID != nil {
		returnFlight, err := r.client.FlightClient.GetFlight(ctx, &pb.UUID{Id: *input.ReturnFlightID})
		if err != nil {
			return nil, err
		}
		if int(returnFlight.AvailableSlots) < ticketNums {
			return nil, fmt.Errorf("not enough available slots")
		}
		_, err = r.client.FlightClient.SetAvailableSlots(ctx, &pb.AvailableSlotsInput{
			Id:             input.GoingFlightID,
			AvailableSlots: returnFlight.AvailableSlots - int64(ticketNums),
		})
		if err != nil {
			return nil, err
		}
	}
	_, err = r.client.CustomerClient.GetCustomer(ctx, &pb.UUID{
		Id: input.CustomerID,
	})
	if err != nil {
		return nil, err
	}
	bookingRes, err := r.client.BookingClient.PostBooking(ctx, internal.ParseBookingInputGraphqlToPb(&input))
	return internal.ParseBookingPbToGraphql(bookingRes), err
}

// CancelBooking is the resolver for the cancelBooking field.
func (r *bookingOpsResolver) CancelBooking(ctx context.Context, obj *model.BookingOps, input *model.BookingCancelInput) (bool, error) {
	if input != nil {
		_, err := r.client.BookingClient.CancelBooking(ctx, &pb.UUID{Id: input.ID})
		if err != nil {
			return false, err
		}
		return true, nil
	}
	return false, fmt.Errorf("missing input")
}

// Booking is the resolver for the booking field.
func (r *mutationResolver) Booking(ctx context.Context) (*model.BookingOps, error) {
	return &model.BookingOps{}, nil
}

// Booking is the resolver for the booking field.
func (r *queryResolver) Booking(ctx context.Context, input *model.Pagination) ([]*model.Booking, error) {
	bookingsRes, err := r.client.BookingClient.GetBookings(ctx,
		internal.ParsePaginationGraphqlToPb(input))
	return internal.ParseBookingsPbToGraphql(bookingsRes), err
}

// Booking returns gql_generated.BookingResolver implementation.
func (r *Resolver) Booking() gql_generated.BookingResolver { return &bookingResolver{r} }

// BookingOps returns gql_generated.BookingOpsResolver implementation.
func (r *Resolver) BookingOps() gql_generated.BookingOpsResolver { return &bookingOpsResolver{r} }

type bookingResolver struct{ *Resolver }
type bookingOpsResolver struct{ *Resolver }
